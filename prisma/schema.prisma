generator client {
    provider = "prisma-client-py"
    interface = "asyncio"
    recursive_type_depth = -1
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// This model represents a discord guild

model Guild {
    snowflake String @id 
    members   Member[]
    roles     Role[]
    items    Item[]
    language Language @default(en)

    settings GuildSettings?

    // indexes
    items_index Int @default(1 )
}


// This model represents discord's user

model User {
    snowflake String @id 
    members   Member[] 
} 

// This model represents a member of a guild, like user, but inside of a guild
 
model Member {
    id Int @id @default(autoincrement())

    // region Connecting
    user   User  @relation(fields: [userId], references: [snowflake])
    userId String 
    guild   Guild  @relation(fields: [guildId], references: [snowflake])
    guildId String 
    // endregion

    // region Money
    money Int @default(0)
    bank  Int @default(0) 
    // endregion

    // region Inventory
    inventoryItems InventoryItem[]
    // endregion

    @@unique([userId, guildId])
}

model GuildSettings {
    // region Connecting
    guild   Guild  @relation(fields: [guildId], references: [snowflake], onDelete: Cascade)
    guildId String @id 
    // endregion

    // region messages
    // is Enabled?
    messageMoneyEnabled Boolean @default(true)
    // Amount
    messageMoneyAmountType MoneyAmountType @default(fixed)
    messageFixedMoneyAmount Int @default(10)
    messageMinMoneyAmount Int @default(5)
    messageMaxMoneyAmount Int @default(25)
    // cooldown - seconds
    messageMoneyCooldown Int @default(60)

    // endregion

    // region voice
    // is Enabled?
    voiceMoneyEnabled Boolean @default(true)
    // Amount
    voiceMoneyAmountType MoneyAmountType @default(fixed)
    voiceFixedMoneyAmount Int @default(10)
    voiceMinMoneyAmount Int @default(5)
    voiceMaxMoneyAmount Int @default(25)
    // cooldown - seconds
    voiceMoneyCooldown Int @default(60)

    // endregion

    // region reaction
    // is Enabled?
    reactionMoneyEnabled Boolean @default(true)
    // Amount
    reactionMoneyAmountType MoneyAmountType @default(fixed)
    reactionFixedMoneyAmount Int @default(10)
    reactionMinMoneyAmount Int @default(5)
    reactionMaxMoneyAmount Int @default(25)
    // cooldown - seconds
    reactionMoneyCooldown Int @default(60)
    
    // endregion
} 

model Role {

    snowflake String @id 

    guild   Guild  @relation(fields: [guildId], references: [snowflake])
    guildId String
    
    collectType CollectType @default(noCollect)
    collectFixedAmount Int @default(10)
    collectPercentageAmount Int @default(10)

    itemsRequired Item[] @relation("ItemRolesRequired")
    itemsToAdd Item[] @relation("ItemRolesToAdd")
    itemsToRemove Item[] @relation("ItemRolesToRemove")

    inventoryItemsToAdd InventoryItem[] @relation("InventoryItemRolesToAdd")
    inventoryItemsToRemove InventoryItem[] @relation("InventoryItemRolesToRemove")
}


model Item {
    // id
    id Int @id @default(autoincrement())

    // guild relation
    guild   Guild  @relation(fields: [guildId], references: [snowflake])
    guildId String

    // title with max length 100 chars
    title String @db.VarChar(200)

    // description with max length 1000 chars
    description String? @db.Text

    // reply message with max length 500 chars
    replyMessage String? @db.Text

    // price
    price Int

    stock Int?

    // can be bought only until 
    availableUntil DateTime?

    index Int @default(1) 

    rolesRequired Role[] @relation("ItemRolesRequired")
    rolesToAdd Role[] @relation("ItemRolesToAdd")
    rolesToRemove Role[] @relation("ItemRolesToRemove")

    @@unique([guildId, title])
}



model InventoryItem {
    id Int @id @default(autoincrement())

    title String @db.VarChar(200)
    description String?

    replyMessage String? @db.Text
    rolesToAdd Role[] @relation("InventoryItemRolesToAdd")
    rolesToRemove Role[] @relation("InventoryItemRolesToRemove")

    owner Member @relation(fields: [ownerId], references: [id])
    ownerId Int 
}


// Statistics 
model InvokedCommand {
    name String @id @db.Char(50)
    count Int @default(0)
}

enum Language {
    uk
    en 
    ru
}

enum MoneyAmountType {
    fixed
    random
}

enum CollectType {
    fixed
    percentage
    noCollect
}